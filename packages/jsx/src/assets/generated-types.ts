
/**
 * This file was AUTOGENERATED from a RELAX-NG grammar.
 */

import { Element as _XMLElement, Text as XMLText } from "xast";

type XMLElement = Omit<_XMLElement, "children">;


export type StartElement = ElementPretextRoot;

export interface ElementPretextRoot extends XMLElement {
  name: "pretext";
  attributes: {
    "xml:lang"?: string;
  };
  children: (ElementArticle | ElementBook | ElementDocInfo | ElementLetter | ElementMemorandum)[];
}

export interface ElementMemorandum extends Omit<XMLElement, "attributes"> {
  name: "memo";
  children: never[];
}

export interface ElementLetter extends Omit<XMLElement, "attributes"> {
  name: "letter";
  children: never[];
}

export interface ElementDocInfo extends XMLElement {
  name: "docinfo";
  attributes: {
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAsymptotePreamble | ElementAuthorBiographies | ElementBrandlogo | ElementCrossReferences | ElementFeedback | ElementImages | ElementInitialism | ElementLatexImagePreamble | ElementMacros | ElementMathPackage | ElementNumbering | ElementRename)[];
}

export interface ElementRename extends XMLElement {
  name: "rename";
  attributes: {
    element: string;
    "xml:lang"?: string;
  };
  children: XMLText[];
}

export interface ElementNumbering extends Omit<XMLElement, "attributes"> {
  name: "numbering";
  children: ElementDivision[];
}

export interface ElementDivision extends XMLElement {
  name: "division";
  attributes: {
    part: "decorative" | "structural";
  };
  children: never[];
}

export interface ElementMathPackage extends XMLElement {
  name: "math-package";
  attributes: {
    "latex-name": string;
    "mathjax-name": string;
  };
  children: never[];
}

export interface ElementMacros extends Omit<XMLElement, "attributes"> {
  name: "macros";
  children: XMLText[];
}

export interface ElementLatexImagePreamble extends Omit<XMLElement, "attributes"> {
  name: "latex-image-preamble";
  children: XMLText[];
}

export interface ElementInitialism extends Omit<XMLElement, "attributes"> {
  name: "initialism";
  children: XMLText[];
}

export interface ElementImages extends Omit<XMLElement, "attributes"> {
  name: "images";
  children: ElementArchive[];
}

export interface ElementArchive extends XMLElement {
  name: "archive";
  attributes: {
    from?: string;
  };
  children: XMLText[];
}

export interface ElementFeedback extends Omit<XMLElement, "attributes"> {
  name: "feedback";
  children: ElementFeedbackUrl[];
}

export interface ElementFeedbackUrl extends Omit<XMLElement, "attributes"> {
  name: "url";
  children: XMLText[];
}

export interface ElementCrossReferences extends XMLElement {
  name: "cross-references";
  attributes: {
    text: "local" | "global" | "hybrid" | "type-local" | "type-global" | "type-hybrid" | "phrase-global" | "phrase-hybrid" | "title" | "custom";
  };
  children: never[];
}

export interface ElementBrandlogo extends XMLElement {
  name: "brandlogo";
  attributes: {
    url?: string;
    source: string;
  };
  children: never[];
}

export interface ElementAuthorBiographies extends XMLElement {
  name: "author-biographies";
  attributes: {
    length: "short" | "long";
  };
  children: never[];
}

export interface ElementAsymptotePreamble extends Omit<XMLElement, "attributes"> {
  name: "asymptote-preamble";
  children: XMLText[];
}

export interface ElementBook extends XMLElement {
  name: "book";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementBookBackMatter | ElementBookFrontMatter | ElementChapter | ElementIndex | ElementLinedSubtitle | ElementLinedTitle | ElementPart | ElementPlainTitle | ElementShortTitle | ElementSubtitle | ElementTitle)[];
}

export interface ElementTitle extends Omit<XMLElement, "attributes"> {
  name: "title";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementUrl | ElementViz | ElementVs | ElementWWVariable | ElementWebwork | ElementXelatex | ElementXetex | ElementXref | XMLText)[];
}

export interface ElementXref extends XMLElement {
  name: "xref";
  attributes: {
    ref?: string;
    first?: string;
    last?: string;
    provisional?: string;
    text?: "local" | "global" | "hybrid" | "type-local" | "type-global" | "type-hybrid" | "phrase-global" | "phrase-hybrid" | "title" | "custom";
    detail?: string;
  };
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementViz | ElementVs | ElementWebwork | ElementXelatex | ElementXetex | XMLText)[];
}

export interface ElementXetex extends Omit<XMLElement, "attributes"> {
  name: "xetex";
  children: never[];
}

export interface ElementXelatex extends Omit<XMLElement, "attributes"> {
  name: "xelatex";
  children: never[];
}

export interface ElementWebwork extends Omit<XMLElement, "attributes"> {
  name: "webwork";
  children: never[];
}

export interface ElementVs extends Omit<XMLElement, "attributes"> {
  name: "vs";
  children: never[];
}

export interface ElementViz extends Omit<XMLElement, "attributes"> {
  name: "viz";
  children: never[];
}

export interface ElementTrademark extends Omit<XMLElement, "attributes"> {
  name: "trademark";
  children: never[];
}

export interface ElementToday extends Omit<XMLElement, "attributes"> {
  name: "today";
  children: never[];
}

export interface ElementTimesignature extends XMLElement {
  name: "timesignature";
  attributes: {
    top: string;
    bottom: string;
  };
  children: never[];
}

export interface ElementTimes extends Omit<XMLElement, "attributes"> {
  name: "times";
  children: never[];
}

export interface ElementTimeofday extends Omit<XMLElement, "attributes"> {
  name: "timeofday";
  children: never[];
}

export interface ElementTex extends Omit<XMLElement, "attributes"> {
  name: "tex";
  children: never[];
}

export interface ElementTerm extends Omit<XMLElement, "attributes"> {
  name: "term";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementUrl | ElementViz | ElementVs | ElementWWVariable | ElementWebwork | ElementXelatex | ElementXetex | ElementXref | XMLText)[];
}

export interface ElementWWVariable extends XMLElement {
  name: "var";
  attributes: {
    name?: string;
    evaluator?: string;
    width?: string;
    category?: "angle" | "decimal" | "exponent" | "formula" | "fraction" | "inequality" | "integer" | "interval" | "logarithm" | "limit" | "number" | "point" | "syntax" | "quantity" | "vector";
    form?: "essay";
  };
  children: never[];
}

export interface ElementUrl extends XMLElement {
  name: "url";
  attributes: {
    href: string;
    visual?: string;
  };
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementViz | ElementVs | ElementWebwork | ElementXelatex | ElementXetex | XMLText)[];
}

export interface ElementTaxon extends XMLElement {
  name: "taxon";
  attributes: {
    ncbi?: string;
  };
  children: (ElementGenus | ElementSpecies | XMLText)[];
}

export interface ElementSpecies extends Omit<XMLElement, "attributes"> {
  name: "species";
  children: XMLText[];
}

export interface ElementGenus extends Omit<XMLElement, "attributes"> {
  name: "genus";
  children: XMLText[];
}

export interface ElementTage extends Omit<XMLElement, "attributes"> {
  name: "tage";
  children: XMLText[];
}

export interface ElementTag extends Omit<XMLElement, "attributes"> {
  name: "tag";
  children: XMLText[];
}

export interface ElementSwungdash extends Omit<XMLElement, "attributes"> {
  name: "swungdash";
  children: never[];
}

export interface ElementStale extends Omit<XMLElement, "attributes"> {
  name: "stale";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementUrl | ElementViz | ElementVs | ElementWWVariable | ElementWebwork | ElementXelatex | ElementXetex | ElementXref | XMLText)[];
}

export interface ElementSq extends Omit<XMLElement, "attributes"> {
  name: "sq";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementUrl | ElementViz | ElementVs | ElementWWVariable | ElementWebwork | ElementXelatex | ElementXetex | ElementXref | XMLText)[];
}

export interface ElementSolidus extends Omit<XMLElement, "attributes"> {
  name: "solidus";
  children: never[];
}

export interface ElementServicemark extends Omit<XMLElement, "attributes"> {
  name: "servicemark";
  children: never[];
}

export interface ElementSectionMark extends Omit<XMLElement, "attributes"> {
  name: "section-mark";
  children: never[];
}

export interface ElementScaledeg extends Omit<XMLElement, "attributes"> {
  name: "scaledeg";
  children: never[];
}

export interface ElementRsq extends Omit<XMLElement, "attributes"> {
  name: "rsq";
  children: never[];
}

export interface ElementRq extends Omit<XMLElement, "attributes"> {
  name: "rq";
  children: never[];
}

export interface ElementRegistered extends Omit<XMLElement, "attributes"> {
  name: "registered";
  children: never[];
}

export interface ElementRdblbracket extends Omit<XMLElement, "attributes"> {
  name: "rdblbracket";
  children: never[];
}

export interface ElementRangle extends Omit<XMLElement, "attributes"> {
  name: "rangle";
  children: never[];
}

export interface ElementQuantity extends Omit<XMLElement, "attributes"> {
  name: "quantity";
  children: (ElementMag | ElementPer | ElementUnit)[];
}

export interface ElementUnit extends XMLElement {
  name: "unit";
  attributes: {
    prefix?: string;
    base: string;
    exp?: string;
  };
  children: never[];
}

export interface ElementPer extends XMLElement {
  name: "per";
  attributes: {
    prefix?: string;
    base: string;
    exp?: string;
  };
  children: never[];
}

export interface ElementMag extends Omit<XMLElement, "attributes"> {
  name: "mag";
  children: XMLText[];
}

export interface ElementQ extends Omit<XMLElement, "attributes"> {
  name: "q";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementUrl | ElementViz | ElementVs | ElementWWVariable | ElementWebwork | ElementXelatex | ElementXetex | ElementXref | XMLText)[];
}

export interface ElementPubtitle extends Omit<XMLElement, "attributes"> {
  name: "pubtitle";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementUrl | ElementViz | ElementVs | ElementWWVariable | ElementWebwork | ElementXelatex | ElementXetex | ElementXref | XMLText)[];
}

export interface ElementPs extends Omit<XMLElement, "attributes"> {
  name: "ps";
  children: never[];
}

export interface ElementPrime extends Omit<XMLElement, "attributes"> {
  name: "prime";
  children: never[];
}

export interface ElementPretext extends Omit<XMLElement, "attributes"> {
  name: "pretext";
  children: never[];
}

export interface ElementPm extends Omit<XMLElement, "attributes"> {
  name: "pm";
  children: never[];
}

export interface ElementPlusminus extends Omit<XMLElement, "attributes"> {
  name: "plusminus";
  children: never[];
}

export interface ElementPilcrow extends Omit<XMLElement, "attributes"> {
  name: "pilcrow";
  children: never[];
}

export interface ElementPhonomark extends Omit<XMLElement, "attributes"> {
  name: "phonomark";
  children: never[];
}

export interface ElementPermille extends Omit<XMLElement, "attributes"> {
  name: "permille";
  children: never[];
}

export interface ElementObelus extends Omit<XMLElement, "attributes"> {
  name: "obelus";
  children: never[];
}

export interface ElementNdash extends Omit<XMLElement, "attributes"> {
  name: "ndash";
  children: never[];
}

export interface ElementNbsp extends Omit<XMLElement, "attributes"> {
  name: "nbsp";
  children: never[];
}

export interface ElementNb extends Omit<XMLElement, "attributes"> {
  name: "nb";
  children: never[];
}

export interface ElementNatural extends Omit<XMLElement, "attributes"> {
  name: "natural";
  children: never[];
}

export interface ElementN extends XMLElement {
  name: "n";
  attributes: {
    pc: "A" | "B" | "C" | "D" | "E" | "F" | "G" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10";
    acc?: "doublesharp" | "sharp" | "flat" | "doubleflat";
    octave?: "1" | "2" | "3" | "4" | "5";
  };
  children: never[];
}

export interface ElementMusicSharp extends Omit<XMLElement, "attributes"> {
  name: "sharp";
  children: never[];
}

export interface ElementMusicFlat extends Omit<XMLElement, "attributes"> {
  name: "flat";
  children: never[];
}

export interface ElementMinus extends Omit<XMLElement, "attributes"> {
  name: "minus";
  children: never[];
}

export interface ElementMidpoint extends Omit<XMLElement, "attributes"> {
  name: "midpoint";
  children: never[];
}

export interface ElementMdash extends Omit<XMLElement, "attributes"> {
  name: "mdash";
  children: never[];
}

export interface ElementMathInline extends Omit<XMLElement, "attributes"> {
  name: "m";
  children: (ElementFillInMath | ElementWWVariable | XMLText)[];
}

export interface ElementFillInMath extends XMLElement {
  name: "fillin";
  attributes: {
    fill?: string;
    characters?: string;
  };
  children: never[];
}

export interface ElementLsq extends Omit<XMLElement, "attributes"> {
  name: "lsq";
  children: never[];
}

export interface ElementLq extends Omit<XMLElement, "attributes"> {
  name: "lq";
  children: never[];
}

export interface ElementLdblbracket extends Omit<XMLElement, "attributes"> {
  name: "ldblbracket";
  children: never[];
}

export interface ElementLatex extends Omit<XMLElement, "attributes"> {
  name: "latex";
  children: never[];
}

export interface ElementLangle extends Omit<XMLElement, "attributes"> {
  name: "langle";
  children: never[];
}

export interface ElementKbd extends XMLElement {
  name: "kbd";
  attributes: {
    name?: string;
  };
  children: XMLText[];
}

export interface ElementInsert extends Omit<XMLElement, "attributes"> {
  name: "insert";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementUrl | ElementViz | ElementVs | ElementWWVariable | ElementWebwork | ElementXelatex | ElementXetex | ElementXref | XMLText)[];
}

export interface ElementInit extends Omit<XMLElement, "attributes"> {
  name: "init";
  children: (ElementCopyleft | ElementCopyrightCharacter | ElementDblprime | ElementDegree | ElementEllipsis | ElementIcon | ElementKbd | ElementLangle | ElementLdblbracket | ElementLq | ElementLsq | ElementMdash | ElementMidpoint | ElementMinus | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPrime | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSwungdash | ElementTimes | ElementTrademark | XMLText)[];
}

export interface ElementIcon extends XMLElement {
  name: "icon";
  attributes: {
    name: string;
  };
  children: XMLText[];
}

export interface ElementEllipsis extends Omit<XMLElement, "attributes"> {
  name: "ellipsis";
  children: never[];
}

export interface ElementDegree extends Omit<XMLElement, "attributes"> {
  name: "degree";
  children: never[];
}

export interface ElementDblprime extends Omit<XMLElement, "attributes"> {
  name: "dblprime";
  children: never[];
}

export interface ElementCopyrightCharacter extends Omit<XMLElement, "attributes"> {
  name: "copyright";
  children: never[];
}

export interface ElementCopyleft extends Omit<XMLElement, "attributes"> {
  name: "copyleft";
  children: never[];
}

export interface ElementIe extends Omit<XMLElement, "attributes"> {
  name: "ie";
  children: never[];
}

export interface ElementForeign extends XMLElement {
  name: "foreign";
  attributes: {
    "xml:lang"?: string;
  };
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementUrl | ElementViz | ElementVs | ElementWWVariable | ElementWebwork | ElementXelatex | ElementXetex | ElementXref | XMLText)[];
}

export interface ElementFillInText extends XMLElement {
  name: "fillin";
  attributes: {
    characters?: string;
    rows?: string;
    cols?: string;
  };
  children: never[];
}

export interface ElementEtc extends Omit<XMLElement, "attributes"> {
  name: "etc";
  children: never[];
}

export interface ElementEtal extends Omit<XMLElement, "attributes"> {
  name: "etal";
  children: never[];
}

export interface ElementEmail extends Omit<XMLElement, "attributes"> {
  name: "email";
  children: XMLText[];
}

export interface ElementEm extends Omit<XMLElement, "attributes"> {
  name: "em";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementUrl | ElementViz | ElementVs | ElementWWVariable | ElementWebwork | ElementXelatex | ElementXetex | ElementXref | XMLText)[];
}

export interface ElementEg extends Omit<XMLElement, "attributes"> {
  name: "eg";
  children: never[];
}

export interface ElementDoublesharp extends Omit<XMLElement, "attributes"> {
  name: "doublesharp";
  children: never[];
}

export interface ElementDoubleflat extends Omit<XMLElement, "attributes"> {
  name: "doubleflat";
  children: never[];
}

export interface ElementDelete extends Omit<XMLElement, "attributes"> {
  name: "delete";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementUrl | ElementViz | ElementVs | ElementWWVariable | ElementWebwork | ElementXelatex | ElementXetex | ElementXref | XMLText)[];
}

export interface ElementDblbrackets extends Omit<XMLElement, "attributes"> {
  name: "dblbrackets";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementUrl | ElementViz | ElementVs | ElementWWVariable | ElementWebwork | ElementXelatex | ElementXetex | ElementXref | XMLText)[];
}

export interface ElementChord extends XMLElement {
  name: "chord";
  attributes: {
    root?: string;
    mode?: string;
    bps?: string;
    bass?: string;
    suspended?: "yes" | "no";
    parentheses?: "yes" | "no";
  };
  children: ElementAlteration[];
}

export interface ElementAlteration extends Omit<XMLElement, "attributes"> {
  name: "alteration";
  children: (ElementCopyleft | ElementCopyrightCharacter | ElementDblprime | ElementDegree | ElementEllipsis | ElementIcon | ElementKbd | ElementLangle | ElementLdblbracket | ElementLq | ElementLsq | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPrime | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSwungdash | ElementTimes | ElementTrademark | XMLText)[];
}

export interface ElementCa extends Omit<XMLElement, "attributes"> {
  name: "ca";
  children: never[];
}

export interface ElementC extends Omit<XMLElement, "attributes"> {
  name: "c";
  children: XMLText[];
}

export interface ElementBc extends Omit<XMLElement, "attributes"> {
  name: "bc";
  children: never[];
}

export interface ElementAttr extends Omit<XMLElement, "attributes"> {
  name: "attr";
  children: XMLText[];
}

export interface ElementArticletitle extends Omit<XMLElement, "attributes"> {
  name: "articletitle";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementUrl | ElementViz | ElementVs | ElementWWVariable | ElementWebwork | ElementXelatex | ElementXetex | ElementXref | XMLText)[];
}

export interface ElementAngles extends Omit<XMLElement, "attributes"> {
  name: "angles";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementUrl | ElementViz | ElementVs | ElementWWVariable | ElementWebwork | ElementXelatex | ElementXetex | ElementXref | XMLText)[];
}

export interface ElementAm extends Omit<XMLElement, "attributes"> {
  name: "am";
  children: never[];
}

export interface ElementAlert extends Omit<XMLElement, "attributes"> {
  name: "alert";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementUrl | ElementViz | ElementVs | ElementWWVariable | ElementWebwork | ElementXelatex | ElementXetex | ElementXref | XMLText)[];
}

export interface ElementAd extends Omit<XMLElement, "attributes"> {
  name: "ad";
  children: never[];
}

export interface ElementAcro extends Omit<XMLElement, "attributes"> {
  name: "acro";
  children: (ElementCopyleft | ElementCopyrightCharacter | ElementDblprime | ElementDegree | ElementEllipsis | ElementIcon | ElementKbd | ElementLangle | ElementLdblbracket | ElementLq | ElementLsq | ElementMdash | ElementMidpoint | ElementMinus | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPrime | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSwungdash | ElementTimes | ElementTrademark | XMLText)[];
}

export interface ElementAbbr extends Omit<XMLElement, "attributes"> {
  name: "abbr";
  children: (ElementCopyleft | ElementCopyrightCharacter | ElementDblprime | ElementDegree | ElementEllipsis | ElementIcon | ElementKbd | ElementLangle | ElementLdblbracket | ElementLq | ElementLsq | ElementMdash | ElementMidpoint | ElementMinus | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPrime | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSwungdash | ElementTimes | ElementTrademark | XMLText)[];
}

export interface ElementSubtitle extends Omit<XMLElement, "attributes"> {
  name: "subtitle";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementUrl | ElementViz | ElementVs | ElementWWVariable | ElementWebwork | ElementXelatex | ElementXetex | ElementXref | XMLText)[];
}

export interface ElementShortTitle extends Omit<XMLElement, "attributes"> {
  name: "shorttitle";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementViz | ElementVs | ElementWebwork | ElementXelatex | ElementXetex | XMLText)[];
}

export interface ElementPlainTitle extends Omit<XMLElement, "attributes"> {
  name: "plaintitle";
  children: XMLText[];
}

export interface ElementPart extends XMLElement {
  name: "part";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementChapter | ElementIndex | ElementLinedTitle | ElementPlainTitle | ElementShortTitle | ElementTitle)[];
}

export interface ElementLinedTitle extends Omit<XMLElement, "attributes"> {
  name: "title";
  children: ElementLongLine[];
}

export interface ElementLongLine extends Omit<XMLElement, "attributes"> {
  name: "line";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementUrl | ElementViz | ElementVs | ElementWWVariable | ElementWebwork | ElementXelatex | ElementXetex | ElementXref | XMLText)[];
}

export interface ElementIndex extends XMLElement {
  name: "idx";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    sortby?: string;
    start?: string;
    finish?: string;
  };
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIdxHeading | ElementIe | ElementIndex | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementSee | ElementSeealso | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementViz | ElementVs | ElementWebwork | ElementXelatex | ElementXetex | XMLText)[];
}

export interface ElementSeealso extends Omit<XMLElement, "attributes"> {
  name: "seealso";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementViz | ElementVs | ElementWebwork | ElementXelatex | ElementXetex | XMLText)[];
}

export interface ElementSee extends Omit<XMLElement, "attributes"> {
  name: "see";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementViz | ElementVs | ElementWebwork | ElementXelatex | ElementXetex | XMLText)[];
}

export interface ElementIdxHeading extends XMLElement {
  name: "h";
  attributes: {
    sortby?: string;
  };
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementViz | ElementVs | ElementWebwork | ElementXelatex | ElementXetex | XMLText)[];
}

export interface ElementChapter extends XMLElement {
  name: "chapter";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementActivity | ElementAlgorithm | ElementAside | ElementAssemblage | ElementAssumption | ElementAuthorByline | ElementAxiom | ElementBiographical | ElementBlockQuote | ElementClaim | ElementCommentary | ElementComputation | ElementConclusionDivision | ElementConjecture | ElementConsole | ElementConvention | ElementCorollary | ElementData | ElementDefinition | ElementExample | ElementExercise | ElementExercises | ElementExploration | ElementFact | ElementFigure | ElementFragment | ElementGlossary | ElementHeuristic | ElementHistorical | ElementHypothesis | ElementIdentity | ElementImageCode | ElementImageRaster | ElementIndex | ElementInsight | ElementIntroductionDivision | ElementInvestigation | ElementLemma | ElementLinedTitle | ElementList | ElementListGenerator | ElementListing | ElementNote | ElementObjectives | ElementObservation | ElementOutcomes | ElementParagraph | ElementParagraphs | ElementPlainTitle | ElementPoem | ElementPreformatted | ElementPrinciple | ElementProblem | ElementProgram | ElementProject | ElementProof | ElementProposition | ElementQuestion | ElementReadingQuestions | ElementReferences | ElementRemark | ElementSage | ElementSection | ElementShortTitle | ElementSideBySide | ElementSideBySideGroup | ElementSolutions | ElementTable | ElementTabular | ElementTechnology | ElementTheorem | ElementTitle | ElementVideo | ElementWarning)[];
}

export interface ElementWarning extends XMLElement {
  name: "warning";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementFigure | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementTable | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementVideo extends XMLElement {
  name: "video";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    width?: string;
    margins?: string;
    aspect?: string;
    start?: string;
    end?: string;
    "play-at"?: "embed" | "popout" | "select";
    preview?: "default" | "generic" | string;
    source?: string;
    href?: string;
    youtube?: string;
    youtubeplaylist?: string;
    vimeo?: string;
  };
  children: never[];
}

export interface ElementTabular extends XMLElement {
  name: "tabular";
  attributes: {
    permid?: string;
    component?: string;
    width?: string;
    margins?: string;
    "row-headers"?: "yes" | "no";
    halign?: "left" | "center" | "right" | "justify";
    valign?: "top" | "middle" | "bottom";
    top?: "none" | "minor" | "medium" | "major";
    bottom?: "none" | "minor" | "medium" | "major";
    left?: "none" | "minor" | "medium" | "major";
    right?: "none" | "minor" | "medium" | "major";
  };
  children: (ElementTableColumn | ElementTableRow)[];
}

export interface ElementTableRow extends XMLElement {
  name: "row";
  attributes: {
    header?: "yes" | "no" | "vertical";
    halign?: "left" | "center" | "right" | "justify";
    valign?: "top" | "middle" | "bottom";
    bottom?: "none" | "minor" | "medium" | "major";
    left?: "none" | "minor" | "medium" | "major";
  };
  children: ElementTableCell[];
}

export interface ElementTableCell extends XMLElement {
  name: "cell";
  attributes: {
    halign?: "left" | "center" | "right" | "justify";
    bottom?: "none" | "minor" | "medium" | "major";
    right?: "none" | "minor" | "medium" | "major";
    colspan?: string;
  };
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLongLine | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementParagraph | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementUrl | ElementViz | ElementVs | ElementWWVariable | ElementWebwork | ElementXelatex | ElementXetex | ElementXref | XMLText)[];
}

export interface ElementParagraph extends XMLElement {
  name: "p";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
  };
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCodeDisplay | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDl | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementFootnote | ElementForeign | ElementIcon | ElementIe | ElementIndex | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMd | ElementMdash | ElementMdn | ElementMe | ElementMen | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementNotation | ElementObelus | ElementOl | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementUl | ElementUrl | ElementViz | ElementVs | ElementWWVariable | ElementWebwork | ElementXelatex | ElementXetex | ElementXref | XMLText)[];
}

export interface ElementUl extends XMLElement {
  name: "ul";
  attributes: {
    permid?: string;
    component?: string;
    cols?: "2" | "3" | "4" | "5" | "6";
    marker?: "disc" | "circle" | "square" | "";
  };
  children: ElementListItem[];
}

export interface ElementListItem extends XMLElement {
  name: "li";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAside | ElementAttr | ElementBc | ElementBiographical | ElementBlockQuote | ElementC | ElementCa | ElementChord | ElementCodeDisplay | ElementConsole | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDl | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFigure | ElementFillInText | ElementFootnote | ElementForeign | ElementHistorical | ElementIcon | ElementIe | ElementImageCode | ElementImageRaster | ElementIndex | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementList | ElementListing | ElementLq | ElementLsq | ElementMathInline | ElementMd | ElementMdash | ElementMdn | ElementMe | ElementMen | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementNotation | ElementObelus | ElementOl | ElementParagraph | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPreformatted | ElementPretext | ElementPrime | ElementProgram | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementSage | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSideBySide | ElementSideBySideGroup | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTable | ElementTabular | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementTitle | ElementToday | ElementTrademark | ElementUl | ElementUrl | ElementVideo | ElementViz | ElementVs | ElementWWVariable | ElementWebwork | ElementXelatex | ElementXetex | ElementXref | XMLText)[];
}

export interface ElementTable extends XMLElement {
  name: "table";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
    landscape?: "yes" | "no";
  };
  children: (ElementIndex | ElementPlainTitle | ElementShortTitle | ElementTabular | ElementTitle)[];
}

export interface ElementSideBySideGroup extends XMLElement {
  name: "sbsgroup";
  attributes: {
    permid?: string;
    component?: string;
    margins?: string;
    width?: string;
    widths?: string;
    valign?: "top" | "middle" | "bottom";
    valigns?: string;
  };
  children: ElementSideBySide[];
}

export interface ElementSideBySide extends XMLElement {
  name: "sidebyside";
  attributes: {
    permid?: string;
    component?: string;
    margins?: string;
    width?: string;
    widths?: string;
    valign?: "top" | "middle" | "bottom";
    valigns?: string;
  };
  children: (ElementConsole | ElementDl | ElementFigure | ElementImageCode | ElementImageRaster | ElementList | ElementListing | ElementOl | ElementParagraph | ElementPoem | ElementPreformatted | ElementProgram | ElementStack | ElementTable | ElementTabular | ElementUl | ElementVideo)[];
}

export interface ElementStack extends Omit<XMLElement, "attributes"> {
  name: "stack";
  children: (ElementConsole | ElementDl | ElementImageCode | ElementImageRaster | ElementOl | ElementParagraph | ElementPreformatted | ElementProgram | ElementTabular | ElementUl | ElementVideo)[];
}

export interface ElementProgram extends XMLElement {
  name: "program";
  attributes: {
    permid?: string;
    component?: string;
    width?: string;
    margins?: string;
    language?: string;
    "line-numbers"?: "yes" | "no";
    "highlight-lines"?: string;
    interactive?: "codelens";
  };
  children: (ElementProgramInput | XMLText)[];
}

export interface ElementProgramInput extends Omit<XMLElement, "attributes"> {
  name: "input";
  children: XMLText[];
}

export interface ElementPreformatted extends Omit<XMLElement, "attributes"> {
  name: "pre";
  children: (ElementCodeLine | XMLText)[];
}

export interface ElementCodeLine extends Omit<XMLElement, "attributes"> {
  name: "cline";
  children: XMLText[];
}

export interface ElementOl extends XMLElement {
  name: "ol";
  attributes: {
    permid?: string;
    component?: string;
    cols?: "2" | "3" | "4" | "5" | "6";
    marker?: string;
  };
  children: ElementListItem[];
}

export interface ElementImageRaster extends XMLElement {
  name: "image";
  attributes: {
    "xml:id"?: string;
    permid?: string;
    component?: string;
    width?: string;
    margins?: string;
    rotate?: string;
    archive?: string;
    source: string;
    decorative?: "no";
  };
  children: (ElementImageDescription | ElementImageShortDescription)[];
}

export interface ElementImageShortDescription extends Omit<XMLElement, "attributes"> {
  name: "shortdescription";
  children: XMLText[];
}

export interface ElementImageDescription extends Omit<XMLElement, "attributes"> {
  name: "description";
  children: (ElementParagraph | ElementTabular)[];
}

export interface ElementImageCode extends XMLElement {
  name: "image";
  attributes: {
    "xml:id"?: string;
    permid?: string;
    component?: string;
    width?: string;
    margins?: string;
    archive?: string;
    decorative?: "no";
  };
  children: (ElementAsymptote | ElementCodeLatexImage | ElementImageDescription | ElementImageShortDescriptionCode | ElementSageplot)[];
}

export interface ElementSageplot extends XMLElement {
  name: "sageplot";
  attributes: {
    label?: string;
    component?: string;
    variant?: "2d" | "3d";
    aspect?: string;
  };
  children: XMLText[];
}

export interface ElementImageShortDescriptionCode extends Omit<XMLElement, "attributes"> {
  name: "shortdescription";
  children: (ElementWWVariable | XMLText)[];
}

export interface ElementCodeLatexImage extends XMLElement {
  name: "latex-image";
  attributes: {
    label?: string;
    permid?: string;
    component?: string;
  };
  children: XMLText[];
}

export interface ElementAsymptote extends XMLElement {
  name: "asymptote";
  attributes: {
    label?: string;
    component?: string;
  };
  children: XMLText[];
}

export interface ElementDl extends XMLElement {
  name: "dl";
  attributes: {
    permid?: string;
    component?: string;
    width?: "narrow" | "medium" | "wide";
  };
  children: ElementDefinitionListItem[];
}

export interface ElementDefinitionListItem extends XMLElement {
  name: "li";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementFigure | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementTable | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementSage extends XMLElement {
  name: "sage";
  attributes: {
    permid?: string;
    component?: string;
    doctest?: string;
    tolerance?: string;
    "auto-evaluate"?: "no" | "yes";
    language?: string;
    type?: string;
  };
  children: (ElementSageInput | ElementSageOutput)[];
}

export interface ElementSageOutput extends Omit<XMLElement, "attributes"> {
  name: "output";
  children: XMLText[];
}

export interface ElementSageInput extends Omit<XMLElement, "attributes"> {
  name: "input";
  children: XMLText[];
}

export interface ElementListing extends XMLElement {
  name: "listing";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
    landscape?: "yes" | "no";
  };
  children: (ElementCaption | ElementConsole | ElementIndex | ElementProgram | ElementTitle)[];
}

export interface ElementConsole extends XMLElement {
  name: "console";
  attributes: {
    permid?: string;
    component?: string;
    prompt?: string;
    width?: string;
    margins?: string;
  };
  children: (ElementConsoleInput | ElementConsoleOutput)[];
}

export interface ElementConsoleOutput extends Omit<XMLElement, "attributes"> {
  name: "output";
  children: XMLText[];
}

export interface ElementConsoleInput extends XMLElement {
  name: "input";
  attributes: {
    prompt?: string;
  };
  children: XMLText[];
}

export interface ElementCaption extends Omit<XMLElement, "attributes"> {
  name: "caption";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementUrl | ElementViz | ElementVs | ElementWWVariable | ElementWebwork | ElementXelatex | ElementXetex | ElementXref | XMLText)[];
}

export interface ElementList extends XMLElement {
  name: "list";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
    landscape?: "yes" | "no";
  };
  children: (ElementConclusionText | ElementDl | ElementIndex | ElementIntroductionText | ElementOl | ElementPlainTitle | ElementShortTitle | ElementTitle | ElementUl)[];
}

export interface ElementIntroductionText extends Omit<XMLElement, "attributes"> {
  name: "introduction";
  children: (ElementBlockQuote | ElementConsole | ElementImageCode | ElementImageRaster | ElementParagraph | ElementPreformatted | ElementProgram | ElementTabular | ElementVideo)[];
}

export interface ElementBlockQuote extends XMLElement {
  name: "blockquote";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAttribution | ElementIndex | ElementParagraph | ElementTitle)[];
}

export interface ElementAttribution extends Omit<XMLElement, "attributes"> {
  name: "attribution";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLongLine | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementUrl | ElementViz | ElementVs | ElementWWVariable | ElementWebwork | ElementXelatex | ElementXetex | ElementXref | XMLText)[];
}

export interface ElementConclusionText extends Omit<XMLElement, "attributes"> {
  name: "conclusion";
  children: (ElementBlockQuote | ElementConsole | ElementImageCode | ElementImageRaster | ElementParagraph | ElementPreformatted | ElementProgram | ElementTabular | ElementVideo)[];
}

export interface ElementHistorical extends XMLElement {
  name: "historical";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementBlockQuote | ElementConsole | ElementImageCode | ElementImageRaster | ElementIndex | ElementParagraph | ElementPreformatted | ElementProgram | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementFigure extends XMLElement {
  name: "figure";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
    landscape?: "yes" | "no";
  };
  children: (ElementCaption | ElementImageCode | ElementImageRaster | ElementIndex | ElementMuseScore | ElementSideBySide | ElementSideBySideGroup | ElementTitle | ElementVideo)[];
}

export interface ElementMuseScore extends XMLElement {
  name: "score";
  attributes: {
    musescoreuser: string;
    musescore: string;
  };
  children: never[];
}

export interface ElementBiographical extends XMLElement {
  name: "biographical";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementBlockQuote | ElementConsole | ElementImageCode | ElementImageRaster | ElementIndex | ElementParagraph | ElementPreformatted | ElementProgram | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementAside extends XMLElement {
  name: "aside";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementBlockQuote | ElementConsole | ElementImageCode | ElementImageRaster | ElementIndex | ElementParagraph | ElementPreformatted | ElementProgram | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementPoem extends XMLElement {
  name: "poem";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
    halign?: "left" | "center" | "right";
  };
  children: (ElementIndex | ElementPoemAuthor | ElementPoemLine | ElementStanza | ElementTitle)[];
}

export interface ElementStanza extends XMLElement {
  name: "stanza";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementIndex | ElementPoemLine | ElementTitle)[];
}

export interface ElementPoemLine extends XMLElement {
  name: "line";
  attributes: {
    indent?: string;
  };
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementViz | ElementVs | ElementWebwork | ElementXelatex | ElementXetex | XMLText)[];
}

export interface ElementPoemAuthor extends XMLElement {
  name: "author";
  attributes: {
    halign?: "left" | "center" | "right";
  };
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementViz | ElementVs | ElementWebwork | ElementXelatex | ElementXetex | XMLText)[];
}

export interface ElementNotation extends Omit<XMLElement, "attributes"> {
  name: "notation";
  children: (ElementNotationDescription | ElementUsage)[];
}

export interface ElementUsage extends Omit<XMLElement, "attributes"> {
  name: "usage";
  children: ElementMathInline[];
}

export interface ElementNotationDescription extends Omit<XMLElement, "attributes"> {
  name: "description";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementViz | ElementVs | ElementWebwork | ElementXelatex | ElementXetex | XMLText)[];
}

export interface ElementMen extends XMLElement {
  name: "men";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
  };
  children: (ElementFillInMath | ElementIndex | ElementWWVariable | XMLText)[];
}

export interface ElementMe extends Omit<XMLElement, "attributes"> {
  name: "me";
  children: (ElementFillInMath | ElementWWVariable | XMLText)[];
}

export interface ElementMdn extends XMLElement {
  name: "mdn";
  attributes: {
    number?: "yes" | "no";
    break?: "yes" | "no";
    alignment?: string;
    "alignat-columns"?: string;
  };
  children: (ElementMathIntertext | ElementMathRow)[];
}

export interface ElementMathRow extends XMLElement {
  name: "mrow";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    number?: "yes" | "no";
    tag?: "star" | "dstar" | "tstar" | "dagger" | "ddagger" | "tdagger" | "daggerdbl" | "ddaggerdbl" | "tdaggerdbl" | "hash" | "dhash" | "thash" | "maltese" | "dmaltese" | "tmaltese";
    break?: "yes" | "no";
  };
  children: (ElementFillInMath | ElementIndex | ElementWWVariable | ElementXref | XMLText)[];
}

export interface ElementMathIntertext extends Omit<XMLElement, "attributes"> {
  name: "intertext";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementUrl | ElementViz | ElementVs | ElementWWVariable | ElementWebwork | ElementXelatex | ElementXetex | ElementXref | XMLText)[];
}

export interface ElementMd extends XMLElement {
  name: "md";
  attributes: {
    number?: "yes" | "no";
    break?: "yes" | "no";
    alignment?: string;
    "alignat-columns"?: string;
  };
  children: (ElementMathIntertext | ElementMathRow)[];
}

export interface ElementFootnote extends XMLElement {
  name: "fn";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
  };
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementIndex | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementUrl | ElementViz | ElementVs | ElementWWVariable | ElementWebwork | ElementXelatex | ElementXetex | ElementXref | XMLText)[];
}

export interface ElementCodeDisplay extends XMLElement {
  name: "cd";
  attributes: {
    latexsep?: string;
  };
  children: (ElementCodeLine | XMLText)[];
}

export interface ElementTableColumn extends XMLElement {
  name: "col";
  attributes: {
    halign?: "left" | "center" | "right" | "justify";
    top?: "none" | "minor" | "medium" | "major";
    right?: "none" | "minor" | "medium" | "major";
    width?: string;
  };
  children: never[];
}

export interface ElementTheorem extends XMLElement {
  name: "theorem";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementCreator | ElementFigure | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementProof | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementStatement | ElementTable | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementStatement extends Omit<XMLElement, "attributes"> {
  name: "statement";
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementFigure | ElementHistorical | ElementImageCode | ElementImageRaster | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementTable | ElementTabular | ElementVideo)[];
}

export interface ElementProof extends XMLElement {
  name: "proof";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementCase | ElementConsole | ElementFigure | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementTable | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementCase extends XMLElement {
  name: "case";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
    direction?: string;
  };
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementFigure | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementTable | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementCreator extends Omit<XMLElement, "attributes"> {
  name: "creator";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementViz | ElementVs | ElementWebwork | ElementXelatex | ElementXetex | XMLText)[];
}

export interface ElementTechnology extends XMLElement {
  name: "technology";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementFigure | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementTable | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementSolutions extends XMLElement {
  name: "solutions";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
    inline?: string;
    divisional?: string;
    project?: string;
    admit?: "all" | "odd" | "even";
  };
  children: (ElementConclusionDivision | ElementIndex | ElementIntroductionDivision | ElementPlainTitle | ElementShortTitle | ElementTitle)[];
}

export interface ElementIntroductionDivision extends XMLElement {
  name: "introduction";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementActivity | ElementAlgorithm | ElementAside | ElementAssemblage | ElementAssumption | ElementAxiom | ElementBiographical | ElementBlockQuote | ElementClaim | ElementComputation | ElementConjecture | ElementConsole | ElementConvention | ElementCorollary | ElementData | ElementDefinition | ElementExample | ElementExercise | ElementExploration | ElementFact | ElementFigure | ElementFragment | ElementHeuristic | ElementHistorical | ElementHypothesis | ElementIdentity | ElementImageCode | ElementImageRaster | ElementIndex | ElementInsight | ElementInvestigation | ElementLemma | ElementList | ElementListGenerator | ElementListing | ElementNote | ElementObservation | ElementParagraph | ElementPoem | ElementPreformatted | ElementPrinciple | ElementProblem | ElementProgram | ElementProject | ElementProof | ElementProposition | ElementQuestion | ElementRemark | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementTable | ElementTabular | ElementTechnology | ElementTheorem | ElementTitle | ElementVideo | ElementWarning)[];
}

export interface ElementRemark extends XMLElement {
  name: "remark";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementFigure | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementTable | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementQuestion extends XMLElement {
  name: "question";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAnswer | ElementAside | ElementBiographical | ElementBlockQuote | ElementConclusionStatement | ElementConsole | ElementFigure | ElementHint | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementIntroductionStatement | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementSolution | ElementStatement | ElementTable | ElementTabular | ElementTask | ElementTitle | ElementVideo)[];
}

export interface ElementTask extends XMLElement {
  name: "task";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAnswer | ElementAside | ElementBiographical | ElementBlockQuote | ElementConclusionStatement | ElementConsole | ElementFigure | ElementHint | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementIntroductionStatement | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementSolution | ElementStatement | ElementTable | ElementTabular | ElementTask | ElementTitle | ElementVideo)[];
}

export interface ElementSolution extends XMLElement {
  name: "solution";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementFigure | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementProof | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementTable | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementIntroductionStatement extends Omit<XMLElement, "attributes"> {
  name: "introduction";
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementFigure | ElementHistorical | ElementImageCode | ElementImageRaster | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementTable | ElementTabular | ElementVideo)[];
}

export interface ElementHint extends XMLElement {
  name: "hint";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementFigure | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementProof | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementTable | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementConclusionStatement extends Omit<XMLElement, "attributes"> {
  name: "conclusion";
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementFigure | ElementHistorical | ElementImageCode | ElementImageRaster | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementTable | ElementTabular | ElementVideo)[];
}

export interface ElementAnswer extends XMLElement {
  name: "answer";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementFigure | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementProof | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementTable | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementProposition extends XMLElement {
  name: "proposition";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementCreator | ElementFigure | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementProof | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementStatement | ElementTable | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementProject extends XMLElement {
  name: "project";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAnswer | ElementAside | ElementBiographical | ElementBlockQuote | ElementConclusionStatement | ElementConclusionText | ElementConsole | ElementFigure | ElementHint | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementIntroductionStatement | ElementIntroductionText | ElementList | ElementListing | ElementParagraph | ElementPostlude | ElementPreformatted | ElementPrelude | ElementProgram | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementSolution | ElementStatement | ElementTable | ElementTabular | ElementTask | ElementTitle | ElementVideo | ElementWebWorkAuthored | ElementWebWorkSource)[];
}

export interface ElementWebWorkSource extends XMLElement {
  name: "webwork";
  attributes: {
    source?: string;
    seed?: string;
  };
  children: never[];
}

export interface ElementWebWorkAuthored extends XMLElement {
  name: "webwork";
  attributes: {
    "xml:id"?: string;
    label?: string;
    component?: string;
    seed?: string;
    copy?: string;
  };
  children: (ElementConclusionText | ElementHintWW | ElementIntroductionText | ElementPgCode | ElementSolutionWW | ElementStatementExerciseWW | ElementTaskWW | ElementWWDescription | ElementWWMacros)[];
}

export interface ElementWWMacros extends Omit<XMLElement, "attributes"> {
  name: "pg-macros";
  children: ElementMacroFile[];
}

export interface ElementMacroFile extends Omit<XMLElement, "attributes"> {
  name: "macro-file";
  children: XMLText[];
}

export interface ElementWWDescription extends Omit<XMLElement, "attributes"> {
  name: "description";
  children: (ElementCopyleft | ElementCopyrightCharacter | ElementDblprime | ElementDegree | ElementEllipsis | ElementIcon | ElementKbd | ElementLangle | ElementLdblbracket | ElementLq | ElementLsq | ElementMdash | ElementMidpoint | ElementMinus | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPrime | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementSectionMark | ElementServicemark | ElementSimpleLine | ElementSolidus | ElementSwungdash | ElementTimes | ElementTrademark | XMLText)[];
}

export interface ElementSimpleLine extends Omit<XMLElement, "attributes"> {
  name: "line";
  children: (ElementCopyleft | ElementCopyrightCharacter | ElementDblprime | ElementDegree | ElementEllipsis | ElementIcon | ElementKbd | ElementLangle | ElementLdblbracket | ElementLq | ElementLsq | ElementMdash | ElementMidpoint | ElementMinus | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPrime | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSwungdash | ElementTimes | ElementTrademark | XMLText)[];
}

export interface ElementTaskWW extends XMLElement {
  name: "task";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementConclusionText | ElementHintWW | ElementIndex | ElementIntroductionText | ElementSolutionWW | ElementStatementExerciseWW | ElementTaskWW | ElementTitle)[];
}

export interface ElementStatementExerciseWW extends Omit<XMLElement, "attributes"> {
  name: "statement";
  children: (ElementImageWW | ElementParagraph | ElementPreformatted | ElementTabular | ElementWWInstruction)[];
}

export interface ElementWWInstruction extends Omit<XMLElement, "attributes"> {
  name: "instruction";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementViz | ElementVs | ElementWebwork | ElementXelatex | ElementXetex | XMLText)[];
}

export interface ElementImageWW extends XMLElement {
  name: "image";
  attributes: {
    "pg-name"?: string;
    width?: string;
    decorative?: "no";
  };
  children: (ElementImageDescription | ElementImageShortDescriptionCode | ElementWWLatexImage)[];
}

export interface ElementWWLatexImage extends Omit<XMLElement, "attributes"> {
  name: "latex-image";
  children: XMLText[];
}

export interface ElementSolutionWW extends Omit<XMLElement, "attributes"> {
  name: "solution";
  children: (ElementImageWW | ElementParagraph | ElementPreformatted | ElementTabular)[];
}

export interface ElementHintWW extends Omit<XMLElement, "attributes"> {
  name: "hint";
  children: (ElementImageWW | ElementParagraph | ElementPreformatted | ElementTabular)[];
}

export interface ElementPgCode extends Omit<XMLElement, "attributes"> {
  name: "pg-code";
  children: XMLText[];
}

export interface ElementPrelude extends Omit<XMLElement, "attributes"> {
  name: "prelude";
  children: (ElementBlockQuote | ElementConsole | ElementImageCode | ElementImageRaster | ElementParagraph | ElementPreformatted | ElementProgram | ElementTabular | ElementVideo)[];
}

export interface ElementPostlude extends Omit<XMLElement, "attributes"> {
  name: "postlude";
  children: (ElementBlockQuote | ElementConsole | ElementImageCode | ElementImageRaster | ElementParagraph | ElementPreformatted | ElementProgram | ElementTabular | ElementVideo)[];
}

export interface ElementProblem extends XMLElement {
  name: "problem";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAnswer | ElementAside | ElementBiographical | ElementBlockQuote | ElementConclusionStatement | ElementConsole | ElementFigure | ElementHint | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementIntroductionStatement | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementSolution | ElementStatement | ElementTable | ElementTabular | ElementTask | ElementTitle | ElementVideo)[];
}

export interface ElementPrinciple extends XMLElement {
  name: "principle";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementCreator | ElementIndex | ElementStatement | ElementTitle)[];
}

export interface ElementObservation extends XMLElement {
  name: "observation";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementFigure | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementTable | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementNote extends XMLElement {
  name: "note";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementFigure | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementTable | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementListGenerator extends XMLElement {
  name: "list-of";
  attributes: {
    elements: string;
    scope?: string;
    divisions?: string;
    empty?: "yes" | "no";
  };
  children: never[];
}

export interface ElementLemma extends XMLElement {
  name: "lemma";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementCreator | ElementFigure | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementProof | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementStatement | ElementTable | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementInvestigation extends XMLElement {
  name: "investigation";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAnswer | ElementAside | ElementBiographical | ElementBlockQuote | ElementConclusionStatement | ElementConclusionText | ElementConsole | ElementFigure | ElementHint | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementIntroductionStatement | ElementIntroductionText | ElementList | ElementListing | ElementParagraph | ElementPostlude | ElementPreformatted | ElementPrelude | ElementProgram | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementSolution | ElementStatement | ElementTable | ElementTabular | ElementTask | ElementTitle | ElementVideo | ElementWebWorkAuthored | ElementWebWorkSource)[];
}

export interface ElementInsight extends XMLElement {
  name: "insight";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementFigure | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementTable | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementIdentity extends XMLElement {
  name: "identity";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementCreator | ElementFigure | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementProof | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementStatement | ElementTable | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementHypothesis extends XMLElement {
  name: "hypothesis";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementCreator | ElementIndex | ElementStatement | ElementTitle)[];
}

export interface ElementHeuristic extends XMLElement {
  name: "heuristic";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementCreator | ElementIndex | ElementStatement | ElementTitle)[];
}

export interface ElementFragment extends XMLElement {
  name: "fragment";
  attributes: {
    "xml:id"?: string;
    filename?: string;
  };
  children: (ElementCode | ElementFragref | ElementTitle)[];
}

export interface ElementFragref extends XMLElement {
  name: "fragref";
  attributes: {
    ref: string;
  };
  children: XMLText[];
}

export interface ElementCode extends Omit<XMLElement, "attributes"> {
  name: "code";
  children: XMLText[];
}

export interface ElementFact extends XMLElement {
  name: "fact";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementCreator | ElementFigure | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementProof | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementStatement | ElementTable | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementExploration extends XMLElement {
  name: "exploration";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAnswer | ElementAside | ElementBiographical | ElementBlockQuote | ElementConclusionStatement | ElementConclusionText | ElementConsole | ElementFigure | ElementHint | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementIntroductionStatement | ElementIntroductionText | ElementList | ElementListing | ElementParagraph | ElementPostlude | ElementPreformatted | ElementPrelude | ElementProgram | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementSolution | ElementStatement | ElementTable | ElementTabular | ElementTask | ElementTitle | ElementVideo | ElementWebWorkAuthored | ElementWebWorkSource)[];
}

export interface ElementExercise extends XMLElement {
  name: "exercise";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
    number?: string;
  };
  children: (ElementAnswer | ElementAside | ElementBiographical | ElementBlockQuote | ElementConclusionStatement | ElementConclusionText | ElementConsole | ElementExerciseOrderedList | ElementFigure | ElementHint | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementIntroductionStatement | ElementIntroductionText | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementSolution | ElementStatementExercise | ElementTable | ElementTabular | ElementTask | ElementTitle | ElementVideo | ElementWebWorkAuthored | ElementWebWorkSource)[];
}

export interface ElementStatementExercise extends Omit<XMLElement, "attributes"> {
  name: "statement";
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementExerciseOrderedList | ElementFigure | ElementHistorical | ElementImageCode | ElementImageRaster | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementTable | ElementTabular | ElementVideo)[];
}

export interface ElementExerciseOrderedList extends XMLElement {
  name: "ol";
  attributes: {
    cols?: string;
    marker?: string;
  };
  children: ElementExerciseListItem[];
}

export interface ElementExerciseListItem extends XMLElement {
  name: "li";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
  };
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementBlockQuote | ElementC | ElementCa | ElementChord | ElementCodeDisplay | ElementConsole | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDl | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementFootnote | ElementForeign | ElementIcon | ElementIe | ElementImageCode | ElementImageRaster | ElementIndex | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMd | ElementMdash | ElementMdn | ElementMe | ElementMen | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementNotation | ElementObelus | ElementOl | ElementParagraph | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPreformatted | ElementPretext | ElementPrime | ElementProgram | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTabular | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementUl | ElementUrl | ElementVideo | ElementViz | ElementVs | ElementWWVariable | ElementWebwork | ElementXelatex | ElementXetex | ElementXref | XMLText)[];
}

export interface ElementExample extends XMLElement {
  name: "example";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAnswer | ElementAside | ElementBiographical | ElementBlockQuote | ElementConclusionStatement | ElementConsole | ElementFigure | ElementHint | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementIntroductionStatement | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementSolution | ElementStatement | ElementTable | ElementTabular | ElementTask | ElementTitle | ElementVideo)[];
}

export interface ElementDefinition extends XMLElement {
  name: "definition";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementIndex | ElementNotation | ElementStatement | ElementTitle)[];
}

export interface ElementData extends XMLElement {
  name: "data";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementFigure | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementTable | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementCorollary extends XMLElement {
  name: "corollary";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementCreator | ElementFigure | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementProof | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementStatement | ElementTable | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementConvention extends XMLElement {
  name: "convention";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementFigure | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementTable | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementConjecture extends XMLElement {
  name: "conjecture";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementCreator | ElementIndex | ElementStatement | ElementTitle)[];
}

export interface ElementComputation extends XMLElement {
  name: "computation";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementFigure | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementTable | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementClaim extends XMLElement {
  name: "claim";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementCreator | ElementFigure | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementProof | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementStatement | ElementTable | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementAxiom extends XMLElement {
  name: "axiom";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementCreator | ElementIndex | ElementStatement | ElementTitle)[];
}

export interface ElementAssumption extends XMLElement {
  name: "assumption";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementCreator | ElementIndex | ElementStatement | ElementTitle)[];
}

export interface ElementAssemblage extends XMLElement {
  name: "assemblage";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementBlockQuote | ElementConsole | ElementImageCode | ElementImageRaster | ElementIndex | ElementParagraph | ElementPreformatted | ElementProgram | ElementSideBySideGroupNoCaption | ElementSideBySideNoCaption | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementSideBySideNoCaption extends XMLElement {
  name: "sidebyside";
  attributes: {
    permid?: string;
    component?: string;
    margins?: string;
    width?: string;
    widths?: string;
    valign?: "top" | "middle" | "bottom";
    valigns?: string;
  };
  children: (ElementConsole | ElementDl | ElementImageCode | ElementImageRaster | ElementOl | ElementParagraph | ElementPoem | ElementPreformatted | ElementProgram | ElementStack | ElementTabular | ElementUl | ElementVideo)[];
}

export interface ElementSideBySideGroupNoCaption extends XMLElement {
  name: "sbsgroup";
  attributes: {
    permid?: string;
    component?: string;
    margins?: string;
    width?: string;
    widths?: string;
    valign?: "top" | "middle" | "bottom";
    valigns?: string;
  };
  children: ElementSideBySideNoCaption[];
}

export interface ElementAlgorithm extends XMLElement {
  name: "algorithm";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementCreator | ElementFigure | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementList | ElementListing | ElementParagraph | ElementPreformatted | ElementProgram | ElementProof | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementStatement | ElementTable | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementActivity extends XMLElement {
  name: "activity";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAnswer | ElementAside | ElementBiographical | ElementBlockQuote | ElementConclusionStatement | ElementConclusionText | ElementConsole | ElementFigure | ElementHint | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementIntroductionStatement | ElementIntroductionText | ElementList | ElementListing | ElementParagraph | ElementPostlude | ElementPreformatted | ElementPrelude | ElementProgram | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementSolution | ElementStatement | ElementTable | ElementTabular | ElementTask | ElementTitle | ElementVideo | ElementWebWorkAuthored | ElementWebWorkSource)[];
}

export interface ElementConclusionDivision extends XMLElement {
  name: "conclusion";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementActivity | ElementAlgorithm | ElementAside | ElementAssemblage | ElementAssumption | ElementAxiom | ElementBiographical | ElementBlockQuote | ElementClaim | ElementComputation | ElementConjecture | ElementConsole | ElementConvention | ElementCorollary | ElementData | ElementDefinition | ElementExample | ElementExercise | ElementExploration | ElementFact | ElementFigure | ElementFragment | ElementHeuristic | ElementHistorical | ElementHypothesis | ElementIdentity | ElementImageCode | ElementImageRaster | ElementIndex | ElementInsight | ElementInvestigation | ElementLemma | ElementList | ElementListGenerator | ElementListing | ElementNote | ElementObservation | ElementParagraph | ElementPoem | ElementPreformatted | ElementPrinciple | ElementProblem | ElementProgram | ElementProject | ElementProof | ElementProposition | ElementQuestion | ElementRemark | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementTable | ElementTabular | ElementTechnology | ElementTheorem | ElementTitle | ElementVideo | ElementWarning)[];
}

export interface ElementSection extends XMLElement {
  name: "section";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementActivity | ElementAlgorithm | ElementAside | ElementAssemblage | ElementAssumption | ElementAuthorByline | ElementAxiom | ElementBiographical | ElementBlockQuote | ElementClaim | ElementCommentary | ElementComputation | ElementConclusionDivision | ElementConjecture | ElementConsole | ElementConvention | ElementCorollary | ElementData | ElementDefinition | ElementExample | ElementExercise | ElementExercises | ElementExploration | ElementFact | ElementFigure | ElementFragment | ElementGlossary | ElementHeuristic | ElementHistorical | ElementHypothesis | ElementIdentity | ElementImageCode | ElementImageRaster | ElementIndex | ElementInsight | ElementIntroductionDivision | ElementInvestigation | ElementLemma | ElementLinedTitle | ElementList | ElementListGenerator | ElementListing | ElementNote | ElementObjectives | ElementObservation | ElementOutcomes | ElementParagraph | ElementParagraphs | ElementPlainTitle | ElementPoem | ElementPreformatted | ElementPrinciple | ElementProblem | ElementProgram | ElementProject | ElementProof | ElementProposition | ElementQuestion | ElementReadingQuestions | ElementReferences | ElementRemark | ElementSage | ElementShortTitle | ElementSideBySide | ElementSideBySideGroup | ElementSolutions | ElementSubsection | ElementTable | ElementTabular | ElementTechnology | ElementTheorem | ElementTitle | ElementVideo | ElementWarning)[];
}

export interface ElementSubsection extends XMLElement {
  name: "subsection";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementActivity | ElementAlgorithm | ElementAside | ElementAssemblage | ElementAssumption | ElementAuthorByline | ElementAxiom | ElementBiographical | ElementBlockQuote | ElementClaim | ElementCommentary | ElementComputation | ElementConclusionDivision | ElementConjecture | ElementConsole | ElementConvention | ElementCorollary | ElementData | ElementDefinition | ElementExample | ElementExercise | ElementExercises | ElementExploration | ElementFact | ElementFigure | ElementFragment | ElementGlossary | ElementHeuristic | ElementHistorical | ElementHypothesis | ElementIdentity | ElementImageCode | ElementImageRaster | ElementIndex | ElementInsight | ElementIntroductionDivision | ElementInvestigation | ElementLemma | ElementList | ElementListGenerator | ElementListing | ElementNote | ElementObjectives | ElementObservation | ElementOutcomes | ElementParagraph | ElementParagraphs | ElementPlainTitle | ElementPoem | ElementPreformatted | ElementPrinciple | ElementProblem | ElementProgram | ElementProject | ElementProof | ElementProposition | ElementQuestion | ElementReadingQuestions | ElementReferences | ElementRemark | ElementSage | ElementShortTitle | ElementSideBySide | ElementSideBySideGroup | ElementSolutions | ElementSubsubsection | ElementTable | ElementTabular | ElementTechnology | ElementTheorem | ElementTitle | ElementVideo | ElementWarning)[];
}

export interface ElementSubsubsection extends XMLElement {
  name: "subsubsection";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementActivity | ElementAlgorithm | ElementAside | ElementAssemblage | ElementAssumption | ElementAuthorByline | ElementAxiom | ElementBiographical | ElementBlockQuote | ElementClaim | ElementCommentary | ElementComputation | ElementConjecture | ElementConsole | ElementConvention | ElementCorollary | ElementData | ElementDefinition | ElementExample | ElementExercise | ElementExercises | ElementExploration | ElementFact | ElementFigure | ElementFragment | ElementGlossary | ElementHeuristic | ElementHistorical | ElementHypothesis | ElementIdentity | ElementImageCode | ElementImageRaster | ElementIndex | ElementInsight | ElementInvestigation | ElementLemma | ElementList | ElementListGenerator | ElementListing | ElementNote | ElementObjectives | ElementObservation | ElementOutcomes | ElementParagraph | ElementParagraphs | ElementPlainTitle | ElementPoem | ElementPreformatted | ElementPrinciple | ElementProblem | ElementProgram | ElementProject | ElementProof | ElementProposition | ElementQuestion | ElementReadingQuestions | ElementReferences | ElementRemark | ElementSage | ElementShortTitle | ElementSideBySide | ElementSideBySideGroup | ElementSolutions | ElementTable | ElementTabular | ElementTechnology | ElementTheorem | ElementTitle | ElementVideo | ElementWarning)[];
}

export interface ElementReferences extends XMLElement {
  name: "references";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementBibliographyItem | ElementConclusionDivision | ElementIndex | ElementIntroductionDivision | ElementPlainTitle | ElementShortTitle | ElementTitle)[];
}

export interface ElementBibliographyItem extends XMLElement {
  name: "biblio";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    type?: "bibtex";
  };
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementBibAuthor | ElementBibEditor | ElementBibJournal | ElementBibNote | ElementBibNumber | ElementBibPages | ElementBibPublisher | ElementBibSeries | ElementBibTitle | ElementBibVolume | ElementBibYear | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIbid | ElementIcon | ElementIe | ElementIndex | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementUrl | ElementViz | ElementVs | ElementWWVariable | ElementWebwork | ElementXelatex | ElementXetex | ElementXref | XMLText)[];
}

export interface ElementIbid extends Omit<XMLElement, "attributes"> {
  name: "ibid";
  children: never[];
}

export interface ElementBibYear extends Omit<XMLElement, "attributes"> {
  name: "year";
  children: XMLText[];
}

export interface ElementBibVolume extends Omit<XMLElement, "attributes"> {
  name: "volume";
  children: XMLText[];
}

export interface ElementBibTitle extends Omit<XMLElement, "attributes"> {
  name: "title";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementUrl | ElementViz | ElementVs | ElementWWVariable | ElementWebwork | ElementXelatex | ElementXetex | ElementXref | XMLText)[];
}

export interface ElementBibSeries extends Omit<XMLElement, "attributes"> {
  name: "series";
  children: XMLText[];
}

export interface ElementBibPublisher extends Omit<XMLElement, "attributes"> {
  name: "publisher";
  children: XMLText[];
}

export interface ElementBibPages extends XMLElement {
  name: "pages";
  attributes: {
    start?: string;
    end?: string;
  };
  children: XMLText[];
}

export interface ElementBibNumber extends Omit<XMLElement, "attributes"> {
  name: "number";
  children: XMLText[];
}

export interface ElementBibNote extends XMLElement {
  name: "note";
  attributes: {
    "xml:id"?: string;
  };
  children: ElementParagraph[];
}

export interface ElementBibJournal extends Omit<XMLElement, "attributes"> {
  name: "journal";
  children: (ElementCopyleft | ElementCopyrightCharacter | ElementDblprime | ElementDegree | ElementEllipsis | ElementIcon | ElementKbd | ElementLangle | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPrime | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSwungdash | ElementTimes | ElementTrademark | XMLText)[];
}

export interface ElementBibEditor extends Omit<XMLElement, "attributes"> {
  name: "editor";
  children: XMLText[];
}

export interface ElementBibAuthor extends Omit<XMLElement, "attributes"> {
  name: "author";
  children: XMLText[];
}

export interface ElementReadingQuestions extends XMLElement {
  name: "reading-questions";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementConclusionDivision | ElementExercise | ElementIndex | ElementIntroductionDivision | ElementPlainTitle | ElementShortTitle | ElementTitle)[];
}

export interface ElementParagraphs extends XMLElement {
  name: "paragraphs";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementActivity | ElementAlgorithm | ElementAside | ElementAssemblage | ElementAssumption | ElementAxiom | ElementBiographical | ElementBlockQuote | ElementClaim | ElementComputation | ElementConjecture | ElementConsole | ElementConvention | ElementCorollary | ElementData | ElementDefinition | ElementExample | ElementExercise | ElementExploration | ElementFact | ElementFigure | ElementFragment | ElementHeuristic | ElementHistorical | ElementHypothesis | ElementIdentity | ElementImageCode | ElementImageRaster | ElementIndex | ElementInsight | ElementInvestigation | ElementLemma | ElementList | ElementListGenerator | ElementListing | ElementNote | ElementObservation | ElementParagraph | ElementPoem | ElementPreformatted | ElementPrinciple | ElementProblem | ElementProgram | ElementProject | ElementProof | ElementProposition | ElementQuestion | ElementRemark | ElementSage | ElementSideBySide | ElementSideBySideGroup | ElementTable | ElementTabular | ElementTechnology | ElementTheorem | ElementTitle | ElementVideo | ElementWarning)[];
}

export interface ElementOutcomes extends XMLElement {
  name: "outcomes";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementConclusionText | ElementDl | ElementIndex | ElementIntroductionText | ElementOl | ElementTitle | ElementUl)[];
}

export interface ElementObjectives extends XMLElement {
  name: "objectives";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementConclusionText | ElementDl | ElementIndex | ElementIntroductionText | ElementOl | ElementTitle | ElementUl)[];
}

export interface ElementGlossary extends XMLElement {
  name: "glossary";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementGlossaryItem | ElementHeadNote | ElementIndex | ElementPlainTitle | ElementShortTitle | ElementTitle)[];
}

export interface ElementHeadNote extends Omit<XMLElement, "attributes"> {
  name: "headnote";
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementHistorical | ElementImageCode | ElementImageRaster | ElementParagraph | ElementPreformatted | ElementProgram | ElementSideBySideGroupNoCaption | ElementSideBySideNoCaption | ElementTabular | ElementVideo)[];
}

export interface ElementGlossaryItem extends XMLElement {
  name: "gi";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementParagraph | ElementPreformatted | ElementProgram | ElementSideBySideGroupNoCaption | ElementSideBySideNoCaption | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementExercises extends XMLElement {
  name: "exercises";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementConclusionDivision | ElementExercise | ElementExerciseGroup | ElementIndex | ElementIntroductionDivision | ElementPlainTitle | ElementShortTitle | ElementSubexercises | ElementTitle)[];
}

export interface ElementSubexercises extends XMLElement {
  name: "subexercises";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementConclusionDivision | ElementExercise | ElementExerciseGroup | ElementIndex | ElementIntroductionDivision | ElementPlainTitle | ElementShortTitle | ElementTitle)[];
}

export interface ElementExerciseGroup extends XMLElement {
  name: "exercisegroup";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
    cols?: "2" | "3" | "4" | "5" | "6";
  };
  children: (ElementConclusionStatementNoCaption | ElementExercise | ElementIndex | ElementIntroductionStatementNoCaption | ElementTitle)[];
}

export interface ElementIntroductionStatementNoCaption extends Omit<XMLElement, "attributes"> {
  name: "introduction";
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementHistorical | ElementImageCode | ElementImageRaster | ElementParagraph | ElementPreformatted | ElementProgram | ElementSideBySideGroupNoCaption | ElementSideBySideNoCaption | ElementTabular | ElementVideo)[];
}

export interface ElementConclusionStatementNoCaption extends Omit<XMLElement, "attributes"> {
  name: "conclusion";
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementHistorical | ElementImageCode | ElementImageRaster | ElementParagraph | ElementPreformatted | ElementProgram | ElementSideBySideGroupNoCaption | ElementSideBySideNoCaption | ElementTabular | ElementVideo)[];
}

export interface ElementCommentary extends XMLElement {
  name: "commentary";
  attributes: {
    component: string;
  };
  children: XMLText[];
}

export interface ElementAuthorByline extends Omit<XMLElement, "attributes"> {
  name: "author";
  children: (ElementCopyleft | ElementCopyrightCharacter | ElementDblprime | ElementDegree | ElementEllipsis | ElementIcon | ElementKbd | ElementLangle | ElementLdblbracket | ElementLq | ElementLsq | ElementMdash | ElementMidpoint | ElementMinus | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPrime | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSwungdash | ElementTimes | ElementTrademark | ElementXref | XMLText)[];
}

export interface ElementLinedSubtitle extends Omit<XMLElement, "attributes"> {
  name: "subtitle";
  children: ElementLongLine[];
}

export interface ElementBookFrontMatter extends XMLElement {
  name: "frontmatter";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAcknowledgement | ElementBiography | ElementColophonFront | ElementDedication | ElementIndex | ElementPreface | ElementTitle | ElementTitlePage)[];
}

export interface ElementTitlePage extends Omit<XMLElement, "attributes"> {
  name: "titlepage";
  children: (ElementAuthor | ElementCredit | ElementDate | ElementEditor)[];
}

export interface ElementEditor extends Omit<XMLElement, "attributes"> {
  name: "editor";
  children: (ElementDepartment | ElementEmail | ElementInstitution | ElementPersonName)[];
}

export interface ElementPersonName extends Omit<XMLElement, "attributes"> {
  name: "personname";
  children: (ElementCopyleft | ElementCopyrightCharacter | ElementDblprime | ElementDegree | ElementEllipsis | ElementIcon | ElementKbd | ElementLangle | ElementLdblbracket | ElementLq | ElementLsq | ElementMdash | ElementMidpoint | ElementMinus | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPrime | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSwungdash | ElementTimes | ElementTrademark | XMLText)[];
}

export interface ElementInstitution extends Omit<XMLElement, "attributes"> {
  name: "institution";
  children: (ElementCopyleft | ElementCopyrightCharacter | ElementDblprime | ElementDegree | ElementEllipsis | ElementIcon | ElementKbd | ElementLangle | ElementLdblbracket | ElementLq | ElementLsq | ElementMdash | ElementMidpoint | ElementMinus | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPrime | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementSectionMark | ElementServicemark | ElementShortLine | ElementSolidus | ElementSwungdash | ElementTimes | ElementTrademark | XMLText)[];
}

export interface ElementShortLine extends Omit<XMLElement, "attributes"> {
  name: "line";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementViz | ElementVs | ElementWebwork | ElementXelatex | ElementXetex | XMLText)[];
}

export interface ElementDepartment extends Omit<XMLElement, "attributes"> {
  name: "department";
  children: (ElementCopyleft | ElementCopyrightCharacter | ElementDblprime | ElementDegree | ElementEllipsis | ElementIcon | ElementKbd | ElementLangle | ElementLdblbracket | ElementLq | ElementLsq | ElementMdash | ElementMidpoint | ElementMinus | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPrime | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementSectionMark | ElementServicemark | ElementShortLine | ElementSolidus | ElementSwungdash | ElementTimes | ElementTrademark | XMLText)[];
}

export interface ElementDate extends Omit<XMLElement, "attributes"> {
  name: "date";
  children: (ElementAd | ElementAm | ElementBc | ElementCa | ElementCopyleft | ElementCopyrightCharacter | ElementDblprime | ElementDegree | ElementEg | ElementEllipsis | ElementEtal | ElementEtc | ElementFillInText | ElementIcon | ElementIe | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMdash | ElementMidpoint | ElementMinus | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSwungdash | ElementTex | ElementTimeofday | ElementTimes | ElementToday | ElementTrademark | ElementViz | ElementVs | ElementWebwork | ElementXelatex | ElementXetex | XMLText)[];
}

export interface ElementCredit extends Omit<XMLElement, "attributes"> {
  name: "credit";
  children: (ElementAuthor | ElementTitle)[];
}

export interface ElementAuthor extends Omit<XMLElement, "attributes"> {
  name: "author";
  children: (ElementDepartment | ElementEmail | ElementInstitution | ElementPersonName)[];
}

export interface ElementPreface extends XMLElement {
  name: "preface";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAside | ElementAttribution | ElementBiographical | ElementBlockQuote | ElementCommentary | ElementConsole | ElementContributors | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementParagraph | ElementParagraphsNoNumber | ElementPreformatted | ElementProgram | ElementSideBySideGroupNoCaption | ElementSideBySideNoCaption | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementParagraphsNoNumber extends XMLElement {
  name: "paragraphs";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementConsole | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementParagraph | ElementPreformatted | ElementProgram | ElementSideBySideGroupNoCaption | ElementSideBySideNoCaption | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementContributors extends Omit<XMLElement, "attributes"> {
  name: "contributors";
  children: ElementContributor[];
}

export interface ElementContributor extends XMLElement {
  name: "contributor";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
  };
  children: (ElementDepartment | ElementEmail | ElementIndex | ElementInstitution | ElementLocation | ElementPersonName)[];
}

export interface ElementLocation extends Omit<XMLElement, "attributes"> {
  name: "location";
  children: (ElementCopyleft | ElementCopyrightCharacter | ElementDblprime | ElementDegree | ElementEllipsis | ElementIcon | ElementKbd | ElementLangle | ElementLdblbracket | ElementLq | ElementLsq | ElementMdash | ElementMidpoint | ElementMinus | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPrime | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSwungdash | ElementTimes | ElementTrademark | XMLText)[];
}

export interface ElementDedication extends XMLElement {
  name: "dedication";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementIndex | ElementParagraph | ElementParagraphLined | ElementTitle)[];
}

export interface ElementParagraphLined extends XMLElement {
  name: "p";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
  };
  children: ElementLine[];
}

export interface ElementLine extends Omit<XMLElement, "attributes"> {
  name: "line";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementViz | ElementVs | ElementWebwork | ElementXelatex | ElementXetex | XMLText)[];
}

export interface ElementColophonFront extends XMLElement {
  name: "colophon";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
  };
  children: (ElementColophonCredit | ElementCopyright | ElementEdition | ElementIndex | ElementWebsite)[];
}

export interface ElementWebsite extends Omit<XMLElement, "attributes"> {
  name: "website";
  children: ElementUrl[];
}

export interface ElementEdition extends Omit<XMLElement, "attributes"> {
  name: "edition";
  children: XMLText[];
}

export interface ElementCopyright extends Omit<XMLElement, "attributes"> {
  name: "copyright";
  children: (ElementHolder | ElementMinilicense | ElementShortLicense | ElementYear)[];
}

export interface ElementYear extends Omit<XMLElement, "attributes"> {
  name: "year";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementViz | ElementVs | ElementWebwork | ElementXelatex | ElementXetex | XMLText)[];
}

export interface ElementShortLicense extends Omit<XMLElement, "attributes"> {
  name: "shortlicense";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementUrl | ElementViz | ElementVs | ElementWWVariable | ElementWebwork | ElementXelatex | ElementXetex | ElementXref | XMLText)[];
}

export interface ElementMinilicense extends Omit<XMLElement, "attributes"> {
  name: "minilicense";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementViz | ElementVs | ElementWebwork | ElementXelatex | ElementXetex | XMLText)[];
}

export interface ElementHolder extends Omit<XMLElement, "attributes"> {
  name: "holder";
  children: XMLText[];
}

export interface ElementColophonCredit extends Omit<XMLElement, "attributes"> {
  name: "credit";
  children: (ElementEntity | ElementRole)[];
}

export interface ElementRole extends Omit<XMLElement, "attributes"> {
  name: "role";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementViz | ElementVs | ElementWebwork | ElementXelatex | ElementXetex | XMLText)[];
}

export interface ElementEntity extends Omit<XMLElement, "attributes"> {
  name: "entity";
  children: (ElementAbbr | ElementAcro | ElementAd | ElementAlert | ElementAm | ElementAngles | ElementArticletitle | ElementAttr | ElementBc | ElementC | ElementCa | ElementChord | ElementCopyleft | ElementCopyrightCharacter | ElementDblbrackets | ElementDblprime | ElementDegree | ElementDelete | ElementDoubleflat | ElementDoublesharp | ElementEg | ElementEllipsis | ElementEm | ElementEmail | ElementEtal | ElementEtc | ElementFillInText | ElementForeign | ElementIcon | ElementIe | ElementInit | ElementInsert | ElementKbd | ElementLangle | ElementLatex | ElementLdblbracket | ElementLq | ElementLsq | ElementMathInline | ElementMdash | ElementMidpoint | ElementMinus | ElementMusicFlat | ElementMusicSharp | ElementN | ElementNatural | ElementNb | ElementNbsp | ElementNdash | ElementObelus | ElementPermille | ElementPhonomark | ElementPilcrow | ElementPlusminus | ElementPm | ElementPretext | ElementPrime | ElementPs | ElementPubtitle | ElementQ | ElementQuantity | ElementRangle | ElementRdblbracket | ElementRegistered | ElementRq | ElementRsq | ElementScaledeg | ElementSectionMark | ElementServicemark | ElementSolidus | ElementSq | ElementStale | ElementSwungdash | ElementTag | ElementTage | ElementTaxon | ElementTerm | ElementTex | ElementTimeofday | ElementTimes | ElementTimesignature | ElementToday | ElementTrademark | ElementUrl | ElementViz | ElementVs | ElementWWVariable | ElementWebwork | ElementXelatex | ElementXetex | ElementXref | XMLText)[];
}

export interface ElementBiography extends XMLElement {
  name: "biography";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementCommentary | ElementConsole | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementParagraph | ElementParagraphsNoNumber | ElementPreformatted | ElementProgram | ElementSideBySideGroupNoCaption | ElementSideBySideNoCaption | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementAcknowledgement extends XMLElement {
  name: "acknowledgement";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAside | ElementBiographical | ElementBlockQuote | ElementCommentary | ElementConsole | ElementHistorical | ElementImageCode | ElementImageRaster | ElementIndex | ElementParagraph | ElementParagraphsNoNumber | ElementPreformatted | ElementProgram | ElementSideBySideGroupNoCaption | ElementSideBySideNoCaption | ElementTabular | ElementTitle | ElementVideo)[];
}

export interface ElementBookBackMatter extends XMLElement {
  name: "backmatter";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementBookAppendix | ElementColophonBack | ElementIndex | ElementIndexDivision | ElementReferences | ElementSolutions | ElementTitle)[];
}

export interface ElementIndexDivision extends XMLElement {
  name: "index";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementIndex | ElementIndexList | ElementPlainTitle | ElementShortTitle | ElementTitle)[];
}

export interface ElementIndexList extends Omit<XMLElement, "attributes"> {
  name: "index-list";
  children: never[];
}

export interface ElementColophonBack extends XMLElement {
  name: "colophon";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
  };
  children: (ElementBlockQuote | ElementConsole | ElementImageCode | ElementImageRaster | ElementIndex | ElementParagraph | ElementPreformatted | ElementProgram | ElementSideBySideGroupNoCaption | ElementSideBySideNoCaption | ElementTabular | ElementVideo)[];
}

export interface ElementBookAppendix extends XMLElement {
  name: "appendix";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementActivity | ElementAlgorithm | ElementAside | ElementAssemblage | ElementAssumption | ElementAuthorByline | ElementAxiom | ElementBiographical | ElementBlockQuote | ElementClaim | ElementCommentary | ElementComputation | ElementConclusionDivision | ElementConjecture | ElementConsole | ElementConvention | ElementCorollary | ElementData | ElementDefinition | ElementExample | ElementExercise | ElementExercises | ElementExploration | ElementFact | ElementFigure | ElementFragment | ElementGlossary | ElementHeuristic | ElementHistorical | ElementHypothesis | ElementIdentity | ElementImageCode | ElementImageRaster | ElementIndex | ElementInsight | ElementIntroductionDivision | ElementInvestigation | ElementLemma | ElementList | ElementListGenerator | ElementListing | ElementNotationList | ElementNote | ElementObjectives | ElementObservation | ElementOutcomes | ElementParagraph | ElementParagraphs | ElementPlainTitle | ElementPoem | ElementPreformatted | ElementPrinciple | ElementProblem | ElementProgram | ElementProject | ElementProof | ElementProposition | ElementQuestion | ElementReadingQuestions | ElementReferences | ElementRemark | ElementSage | ElementSection | ElementShortTitle | ElementSideBySide | ElementSideBySideGroup | ElementSolutions | ElementTable | ElementTabular | ElementTechnology | ElementTheorem | ElementTitle | ElementVideo | ElementWarning)[];
}

export interface ElementNotationList extends Omit<XMLElement, "attributes"> {
  name: "notation-list";
  children: never[];
}

export interface ElementArticle extends XMLElement {
  name: "article";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementActivity | ElementAlgorithm | ElementArticleBackMatter | ElementArticleFrontMatter | ElementAside | ElementAssemblage | ElementAssumption | ElementAxiom | ElementBiographical | ElementBlockQuote | ElementClaim | ElementCommentary | ElementComputation | ElementConclusionDivision | ElementConjecture | ElementConsole | ElementConvention | ElementCorollary | ElementData | ElementDefinition | ElementExample | ElementExercise | ElementExercises | ElementExploration | ElementFact | ElementFigure | ElementFragment | ElementGlossary | ElementHeuristic | ElementHistorical | ElementHypothesis | ElementIdentity | ElementImageCode | ElementImageRaster | ElementIndex | ElementInsight | ElementIntroductionDivision | ElementInvestigation | ElementLemma | ElementLinedSubtitle | ElementLinedTitle | ElementList | ElementListGenerator | ElementListing | ElementNote | ElementObjectives | ElementObservation | ElementOutcomes | ElementParagraph | ElementParagraphs | ElementPlainTitle | ElementPoem | ElementPreformatted | ElementPrinciple | ElementProblem | ElementProgram | ElementProject | ElementProof | ElementProposition | ElementQuestion | ElementReadingQuestions | ElementReferences | ElementRemark | ElementSage | ElementSection | ElementShortTitle | ElementSideBySide | ElementSideBySideGroup | ElementSolutions | ElementSubtitle | ElementTable | ElementTabular | ElementTechnology | ElementTheorem | ElementTitle | ElementVideo | ElementWarning)[];
}

export interface ElementArticleFrontMatter extends XMLElement {
  name: "frontmatter";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementAbstract | ElementIndex | ElementTitle | ElementTitlePage)[];
}

export interface ElementAbstract extends XMLElement {
  name: "abstract";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
  };
  children: (ElementBlockQuote | ElementConsole | ElementImageCode | ElementImageRaster | ElementIndex | ElementParagraph | ElementPreformatted | ElementProgram | ElementTabular | ElementVideo)[];
}

export interface ElementArticleBackMatter extends XMLElement {
  name: "backmatter";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementArticleAppendix | ElementColophonBack | ElementIndex | ElementIndexDivision | ElementReferences | ElementSolutions | ElementTitle)[];
}

export interface ElementArticleAppendix extends XMLElement {
  name: "appendix";
  attributes: {
    "xml:id"?: string;
    label?: string;
    permid?: string;
    component?: string;
    "xml:base"?: string;
    "xml:lang"?: string;
  };
  children: (ElementActivity | ElementAlgorithm | ElementAside | ElementAssemblage | ElementAssumption | ElementAuthorByline | ElementAxiom | ElementBiographical | ElementBlockQuote | ElementClaim | ElementCommentary | ElementComputation | ElementConclusionDivision | ElementConjecture | ElementConsole | ElementConvention | ElementCorollary | ElementData | ElementDefinition | ElementExample | ElementExercise | ElementExercises | ElementExploration | ElementFact | ElementFigure | ElementFragment | ElementGlossary | ElementHeuristic | ElementHistorical | ElementHypothesis | ElementIdentity | ElementImageCode | ElementImageRaster | ElementIndex | ElementInsight | ElementIntroductionDivision | ElementInvestigation | ElementLemma | ElementList | ElementListGenerator | ElementListing | ElementNotationList | ElementNote | ElementObjectives | ElementObservation | ElementOutcomes | ElementParagraph | ElementParagraphs | ElementPlainTitle | ElementPoem | ElementPreformatted | ElementPrinciple | ElementProblem | ElementProgram | ElementProject | ElementProof | ElementProposition | ElementQuestion | ElementReadingQuestions | ElementReferences | ElementRemark | ElementSage | ElementShortTitle | ElementSideBySide | ElementSideBySideGroup | ElementSolutions | ElementSubsection | ElementTable | ElementTabular | ElementTechnology | ElementTheorem | ElementTitle | ElementVideo | ElementWarning)[];
}